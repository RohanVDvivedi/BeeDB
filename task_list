
 * define catalog tables and indexes on it - persistent
 * define lock tables and indexes on it - volatile
 * define transaction table and indexes on it - persistent
 * define statistics tables - persistent in a different database
 * define beedb struct
   * with pointer access to volatile memory using VolatilePageStore, and to shared persistent memory using MinTxEngine
   * using their corresponding page access methods and page modification methods
   * add data structures to get access for most relevant tuple definitions
 * define high level transaction struct consisteing of
   * 64 bit transactions id
   * last_mini_tx_id (id of the last mini transaction executed), last_logical_log_lsn (lsn of the last logical modification done)

 * implement query plan tree
   * with operators
 * implement relational algebra operators
   * selection -> filter with/without indexes
   * projection -> picking columns
   * sorting -> with/without indexes
   * joins -> with/without indexes
   * union, set difference and intersection

 * define layout for MVCC columns and figure out how to store multiple versions
 * define MVCC rules for different isolation levels

 * Design methodology
   * we will use postgresql architecture over (mysql like) mini transactions
   * we will have heaps (a future tuple indexer data structure) for storing tables, insert to which gives us a page_id (physical page_id) and a index (slot no) in that page
   * indexes will always include the page_id, slot_no in the index key right after the actual key columns, and the index entry will be index key followed by the covering columns
   * inserts/deletes will always be done to heap in a single mini transaction one at a time
     * inserts/deletes to indexes will be done in mini transactions not owned by anyone
   * updates are just delete followed by insert into the heap
   * reads will be be done without mini transactions, but in a fixed number of them
   * there will be vaccum, which will be thought off at the end of this project
   * header will include xmin, xmax, is_xmin_committed?, is_xmax_committed?, is_xmin_aborted?, is_xmax_aborted?
     * xmin, xmax will be 64 or lesser (atleast 48) bits wide
     * the *? are advisory bitmaps and should be kept updated when ever a heap page is being read (if only a read lock on page is held then let another writer do it asynchronously) or written

 * we need a heap table data structure like postgresql
   * we will need 2 bplus_trees
     * free_space_tree key = (free_space, page_id)
     * heap_pages_tree key = (page_id)
   * loop iterations over the tree is done using the heap_pages_tree, and a read iterator
   * query and update to free space is done over only the free_space_tree
   * inserts inserts to both, OR only a point update call in the free_space_tree, if inserting to an existing page
   * deletes delete from both, OR only a point update call in the free_space_tree, if deleting the tuple does not make the page empty
   * inserts first search the free_space_tree for a right fit page to insert into
   * allocating will be done best fit
   * need an order while acquiring the locks on heap pages themselves, heap_pages_tree and free_space_tree
     * as both the trees point to the same heap pages we can dead lock, if you operate on them in the same mini transaction