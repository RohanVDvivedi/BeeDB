
 * define catalog tables and indexes on it - persistent
 * define lock tables and indexes on it - volatile
 * define transaction table and indexes on it - persistent
 * define statistics tables - persistent
 * define beedb struct
   * with pointer access to volatile memory using VolatilePageStore, and to shared persistent memory using MinTxEngine
   * using their corresponding page access methods and page modification methods
   * add data structures to get access for most relevant tuple definitions
 * define high level transaction struct consisteing of
   * 64 bit transactions id
   * last_mini_tx_id (id of the last mini transaction executed), last_logical_log_lsn (lsn of the last logical modification done)

 * implement query plan tree
   * with operators
 * implement relational algebra operators
   * selection -> filter with/without indexes
   * projection -> picking columns
   * sorting -> with/without indexes
   * joins -> with/without indexes
   * union, set difference and intersection

 * define layout for MVCC columns and figure out how to store multiple versions
 * define MVCC rules for different isolation levels

 * Design methodology
   * we will use postgresql architecture over mini transactions
   * we will have heaps (a future tuple indexer data structure) for storing tables, insert to which gives us a page_id (physical page_id) and a index (slot no) in that page
   * indexes will always include the page_id, slot_no in the index after the indexed columns and before the covering columns
   * inserts/deletes will always be done to all indexes and heaps in a single mini transaction
   * updates are just delete followed by insert
   * logical log is included in the commit message of mini transaction
     * above above points ensure that logical replication (in future) is done independently, allowing followers to have a different set of indexes
   * there will be vaccum, which will be thought off at the end of this project
   * header will include xmin, xmax, is_xmin_committed?, is_xmax_committed?
     * xmin, xmax will be 64 or lesser (atleast 48) bits wide
     * is_x***_committed? == 1, then x*** is surely committed, else we need to check if it is aborted or not

 * we need a heap table data structure like postgresql
   * use a bplus_tree (call it free space tree) to store keys for free_space in bytes, page_id
   * allocate a page and then update it in this free_space_tree
   * insert/delete of tuples will cause the heap page to have a different amount of free space and may need reinserting the modified heap page in the free space tree
   * we will need shared/exclusive lock on the heap table to perform inserts/deletes and table scan, as intermitent changes to the heap table's free space tree may revisit already seen tuples OR skip some tuple entirely (in case of leaf only scans)
   * think about lazily updating the free space tree(using a shared lock to find a page with enough free space and insert there, and then lazily at a later time reinsert this entry in free space tree with an exclusive lock)
   * deleting the tuple is done directly from the page_id, slot_no pointed to by the index, reinsertion or removal of this page (if empty) is done lazily